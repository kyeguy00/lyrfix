import axios from 'axios';
import cio from 'cheerio-without-node-native';

const checkOptions = (options) => {
	let { apiKey, title, artist } = options;
	if (!apiKey) {
		throw '"apiKey" property is missing from options';
	} else if (!title) {
		throw '"title" property is missing from options';
	} else if (!artist) {
		throw '"artist" property is missing from options';
	}
};

const getTitle = (title, artist) => {
	return `${title} ${artist}`
		.toLowerCase()
		.replace(/ *\([^)]*\) */g, '')
		.replace(/ *\[[^\]]*]/, '')
		.replace(/feat.|ft./g, '')
		.replace(/\s+/g, ' ')
		.trim();
};

var utils = { checkOptions, getTitle };

const { checkOptions: checkOptions$1, getTitle: getTitle$1 } = utils;

const searchUrl = 'https://api.genius.com/search?q=';

/**
 * @param {{apiKey: string, title: string, artist: string, optimizeQuery: boolean, authHeader: boolean}} options
 */
var searchSong = async function (options) {
	try {
		checkOptions$1(options);
		let { apiKey, title, artist, optimizeQuery = false, authHeader = false } = options;
		const song = optimizeQuery ? getTitle$1(title, artist) : `${title} ${artist}`;
		const reqUrl = `${searchUrl}${encodeURIComponent(song)}`;
		const headers = {
			Authorization: 'Bearer ' + apiKey
		};
		let { data } = await axios.get(
			authHeader ? reqUrl : `${reqUrl}&access_token=${apiKey}`,
			authHeader && { headers }
		);
		if (data.response.hits.length === 0) return null;
		const results = data.response.hits.map((val) => {
			const { full_title, song_art_image_url, id, url } = val.result;
			return { id, title: full_title, albumArt: song_art_image_url, url };
		});
		return results;
	} catch (e) {
		throw e;
	}
};

/**
 * @param {string} url - Genius URL
 */
var extractLyrics = async function (url) {
	try {
		let { data } = await axios.get(url);
		const $ = cio.load(data);
		let lyrics = $('div[class="lyrics"]').text().trim();
		if (!lyrics) {
			lyrics = '';
			$('div[class^="Lyrics__Container"]').each((i, elem) => {
				if($(elem).text().length !== 0) {
					let snippet = $(elem).html()
					.replace(/<br>/g, '\n')
					.replace(/<(?!\s*br\s*\/?)[^>]+>/gi, '');
					lyrics += $('<textarea/>').html(snippet).text().trim() + '\n\n';
				}
    	});
		}
		if (!lyrics) return null;
		return lyrics.trim();
	} catch (e) {
		throw e;
	}
};

const { checkOptions: checkOptions$2 } = utils;


/**
 * @param {({apiKey: string, title: string, artist: string, optimizeQuery: boolean}|string)} arg - options object, or Genius URL
 */
var getLyrics = async function (arg) {
	try {
		if (arg && typeof arg === 'string') {
			let lyrics = await extractLyrics(arg);
			return lyrics;
		} else if (typeof arg === 'object') {
			checkOptions$2(arg);
			let results = await searchSong(arg);
			if (!results) return null;
			let lyrics = await extractLyrics(results[0].url);
			return lyrics;
		} else {
			throw 'Invalid argument';
		}
	} catch (e) {
		throw e;
	}
};

const { checkOptions: checkOptions$3 } = utils;

/**
 * @param {{apiKey: string, title: string, artist: string, optimizeQuery: boolean}} options
 */
var getAlbumArt = async function (options) {
	checkOptions$3(options);
	let results = await searchSong(options);
	if (!results) return null;
	return results[0].albumArt;
};

const { checkOptions: checkOptions$4 } = utils;

/**
 * @param {{apiKey: string, title: string, artist: string, optimizeQuery: boolean}} options
 */
var getSong = async function (options) {
	try {
		checkOptions$4(options);
		let results = await searchSong(options);
		if (!results) return null;
		let lyrics = await extractLyrics(results[0].url);
		return {
			id: results[0].id,
			title: results[0].title,
			url: results[0].url,
			lyrics,
			albumArt: results[0].albumArt
		};
	} catch (e) {
		throw e;
	}
};

const url = 'https://api.genius.com/songs/';

/**
 * @param {(number|string)} id
 * @param {string} apiKey
 */
var getSongById = async function (id, apiKey) {
	if (!id) throw 'No id was provided';
	try {
		// const headers = {
		// 	Authorization: 'Bearer ' + apiKey
		// };
		let {
			data: {
				response: { song }
			}
		} = await axios.get(
			`${url}${id}&access_token=${apiKey}`
			// { headers }
		);
		let lyrics = await extractLyrics(song.url);
		return {
			id: song.id,
			title: song.full_title,
			url: song.url,
			lyrics,
			albumArt: song.song_art_image_url
		};
	} catch (e) {
		throw e;
	}
};

var getLyrics$1 = getLyrics;
var getAlbumArt$1 = getAlbumArt;
var getSong$1 = getSong;
var searchSong$1 = searchSong;
var getSongById$1 = getSongById;

var geniusLyricsApi = {
	getLyrics: getLyrics$1,
	getAlbumArt: getAlbumArt$1,
	getSong: getSong$1,
	searchSong: searchSong$1,
	getSongById: getSongById$1
};

export default geniusLyricsApi;
export { geniusLyricsApi as __moduleExports, getAlbumArt$1 as getAlbumArt, getLyrics$1 as getLyrics, getSong$1 as getSong, getSongById$1 as getSongById, searchSong$1 as searchSong };
